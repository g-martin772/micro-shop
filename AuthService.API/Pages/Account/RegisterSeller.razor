@page "/Account/RegisterSeller"
@using System.Security.Claims
@using AuthService.API.Models
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<h1>Create business account</h1>

<EditForm Model="Model" OnValidSubmit="SubmitRegister" FormName="registerForm">
    <DataAnnotationsValidator/>
    <label for="email">Email</label>
    <InputText @bind-Value="Model.Email" type="email" id="email"/>
    <ValidationMessage For="() => Model.Email"/>
    
    <label for="company_name">Company Name</label>
    <InputText @bind-Value="Model.CompanyName" type="text" id="company_name"/>
    <ValidationMessage For="() => Model.CompanyName"/>

    <label for="password">Password</label>
    <InputText @bind-Value="Model.Password" type="password" id="password"/>
    <ValidationMessage For="() => Model.Password"/>

    <label for="password_conf">Confirm Password</label>
    <InputText @bind-Value="Model.PasswordConf" type="password" id="password_conf"/>
    <ValidationMessage For="() => Model.PasswordConf"/>

    <button type="submit">Register</button>
</EditForm>

@code {
    private RegisterModel Model { get; set; } = new RegisterModel();
    private string ResultMessage { get; set; } = string.Empty;
    private string Countdown { get; set; } = string.Empty;
    [SupplyParameterFromQuery] private string ReturnUrl { get; set; } = string.Empty;
    
    private async Task SubmitRegister()
    {
        if (!string.Equals(Model.Password, Model.PasswordConf))
        {
            ResultMessage = "Passwords do not match!";
            return;
        }

        Console.WriteLine($"Register with data: Email: {Model.Email} - Password: {Model.Password}");

        var result = await UserManager.CreateAsync(new ApplicationUser { Email = Model.Email, UserName = Model.Email }, Model.Password);

        if (result == IdentityResult.Success)
        {
            var user = await UserManager.FindByEmailAsync(Model.Email);
            await UserManager.AddClaimAsync(user!, new Claim("Seller", Model.CompanyName));
        }
        else
        {
            throw new Exception("Panic");
        }

        if (result == IdentityResult.Success)
        {
            ResultMessage = "User created successfully!";
            Console.WriteLine($"User created successfully with data: {Model.Email} and {Model.Password}!");

            for (int i = 5; i > 0; i--)
            {
                Countdown = $"Redirecting you in {i}s...";
                await InvokeAsync(StateHasChanged);
                await Task.Delay(1000);
            }

            NavigationManager.NavigateTo(string.IsNullOrEmpty(ReturnUrl)
                ? "/Account/Login"
                : $"/Account/Login?returnUrl={ReturnUrl}");
        }

        else
            ResultMessage = string.Join("\n", result.Errors.Select(x => x.Description));
    }

    public class RegisterModel
    {
        [Required] public string CompanyName { get; set; }
        [Required] public string Email { get; set; }
        [Required] public string Password { get; set; }
        [Required] public string PasswordConf { get; set; }
    }

}